// Comando para listar feiti√ßos dispon√≠veis
const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder } = require('discord.js');
const FEITICOS_BASE_ARCADIA = require('../dados/feiticos.js');

async function listarFeiticos(message, args, getFichaOuCarregar) {
    try {
        const ficha = await getFichaOuCarregar(message.author.id);
        if (!ficha) {
            return message.reply("‚ùå Voc√™ precisa criar uma ficha primeiro! Use `/criar` para come√ßar sua jornada em Arc√°dia.");
        }

        // Se n√£o h√° argumentos, mostrar categorias
        if (!args || args.length === 0) {
            return mostrarCategoriasFeiticos(message);
        }

        const categoria = args[0].toLowerCase();
        
        switch (categoria) {
            case 'raca':
            case 'ra√ßa':
                return mostrarFeiticosPorOrigem(message, 'raca', ficha);
            case 'classe':
                return mostrarFeiticosPorOrigem(message, 'classe', ficha);
            case 'especial':
                return mostrarFeiticosPorOrigem(message, 'classe_especial', ficha);
            case 'conhecidos':
                return mostrarFeiticosConhecidos(message, ficha);
            case 'info':
                if (args[1]) {
                    return mostrarInfoFeitico(message, args[1], ficha);
                } else {
                    return message.reply("‚ùå Especifique o ID do feiti√ßo. Exemplo: `!listarfeiticos info raca_humano_cura_menor`");
                }
            default:
                return mostrarCategoriasFeiticos(message);
        }
    } catch (error) {
        console.error('[LISTAR FEITI√áOS] Erro:', error);
        return message.reply("‚ùå Erro interno ao listar feiti√ßos.");
    }
}

function mostrarCategoriasFeiticos(message) {
    const embed = new EmbedBuilder()
        .setTitle("üìú Sistema de Feiti√ßos de Arc√°dia")
        .setDescription("Escolha uma categoria para explorar os feiti√ßos dispon√≠veis:")
        .addFields(
            { 
                name: "üß¨ Feiti√ßos de Ra√ßa", 
                value: "`!listarfeiticos raca` - Feiti√ßos √∫nicos da sua ra√ßa", 
                inline: true 
            },
            { 
                name: "‚öîÔ∏è Feiti√ßos de Classe", 
                value: "`!listarfeiticos classe` - Feiti√ßos da sua classe", 
                inline: true 
            },
            { 
                name: "‚ú® Feiti√ßos Especiais", 
                value: "`!listarfeiticos especial` - Feiti√ßos de classes especiais", 
                inline: true 
            },
            { 
                name: "üìö Feiti√ßos Conhecidos", 
                value: "`!listarfeiticos conhecidos` - Seus feiti√ßos aprendidos", 
                inline: true 
            },
            { 
                name: "üîç Informa√ß√µes Detalhadas", 
                value: "`!listarfeiticos info <id>` - Detalhes de um feiti√ßo espec√≠fico", 
                inline: true 
            },
            { 
                name: "üí° Dica", 
                value: "Use os feiti√ßos em combate com `!usarfeitico <id>`", 
                inline: false 
            }
        )
        .setColor(0x9932CC)
        .setFooter({ text: "Sistema de Magia de Arc√°dia" });

    return message.reply({ embeds: [embed] });
}

async function mostrarFeiticosPorOrigem(message, tipoOrigem, ficha) {
    const feiticosFiltrados = Object.values(FEITICOS_BASE_ARCADIA).filter(feitico => {
        if (feitico.origemTipo !== tipoOrigem) return false;
        
        // Filtrar por ra√ßa/classe do jogador
        if (tipoOrigem === 'raca' && feitico.origemNome !== ficha.raca) return false;
        if (tipoOrigem === 'classe' && feitico.origemNome !== ficha.classe) return false;
        
        return true;
    });

    if (feiticosFiltrados.length === 0) {
        const tipoTexto = tipoOrigem === 'raca' ? 'ra√ßa' : 'classe';
        return message.reply(`‚ùå N√£o h√° feiti√ßos dispon√≠veis para sua ${tipoTexto}.`);
    }

    // Agrupar por n√≠vel de requisito
    const feiticosPorNivel = {};
    feiticosFiltrados.forEach(feitico => {
        const nivelReq = feitico.requisitosParaAprender.length > 0 ? 
            Math.max(...feitico.requisitosParaAprender.map(req => req.nivelMinimo || 1)) : 1;
        
        if (!feiticosPorNivel[nivelReq]) {
            feiticosPorNivel[nivelReq] = [];
        }
        feiticosPorNivel[nivelReq].push(feitico);
    });

    const embed = new EmbedBuilder()
        .setTitle(`üìú Feiti√ßos de ${tipoOrigem === 'raca' ? 'Ra√ßa' : 'Classe'}: ${ficha[tipoOrigem]}`)
        .setDescription("Feiti√ßos dispon√≠veis organizados por n√≠vel de requisito:")
        .setColor(0x9932CC);

    Object.keys(feiticosPorNivel).sort((a, b) => parseInt(a) - parseInt(b)).forEach(nivel => {
        const feiticos = feiticosPorNivel[nivel];
        const feiticosTexto = feiticos.map(f => {
            const conhecido = ficha.magiasConhecidas?.find(m => m.id === f.id);
            const status = conhecido ? `‚úÖ Nv.${conhecido.nivel}` : '‚ùå';
            return `${status} **${f.nome}** (${f.id})`;
        }).join('\n');

        embed.addFields({
            name: `üéØ N√≠vel ${nivel}+`,
            value: feiticosTexto || 'Nenhum feiti√ßo dispon√≠vel',
            inline: false
        });
    });

    embed.setFooter({ text: "Use !listarfeiticos info <id> para mais detalhes" });

    return message.reply({ embeds: [embed] });
}

async function mostrarFeiticosConhecidos(message, ficha) {
    if (!ficha.magiasConhecidas || ficha.magiasConhecidas.length === 0) {
        return message.reply("‚ùå Voc√™ ainda n√£o aprendeu nenhum feiti√ßo. Use `!aprenderfeitico` para aprender novos feiti√ßos!");
    }

    const embed = new EmbedBuilder()
        .setTitle(`üìö Feiti√ßos Conhecidos - ${ficha.nomePersonagem}`)
        .setDescription(`Voc√™ conhece **${ficha.magiasConhecidas.length}** feiti√ßos:`)
        .setColor(0x00FF00);

    // Agrupar por origem
    const feiticosPorOrigem = {};
    ficha.magiasConhecidas.forEach(magiaAprendida => {
        const feiticoBase = FEITICOS_BASE_ARCADIA[magiaAprendida.id];
        if (!feiticoBase) return;

        const origem = `${feiticoBase.origemTipo}_${feiticoBase.origemNome}`;
        if (!feiticosPorOrigem[origem]) {
            feiticosPorOrigem[origem] = [];
        }
        feiticosPorOrigem[origem].push({ ...magiaAprendida, base: feiticoBase });
    });

    Object.keys(feiticosPorOrigem).forEach(origem => {
        const feiticos = feiticosPorOrigem[origem];
        const [tipo, nome] = origem.split('_', 2);
        const tipoTexto = tipo === 'raca' ? 'üß¨ Ra√ßa' : tipo === 'classe' ? '‚öîÔ∏è Classe' : '‚ú® Especial';
        
        const feiticosTexto = feiticos.map(f => {
            const detalhesNivel = f.base.niveis.find(n => n.nivel === f.nivel);
            const custoPM = detalhesNivel?.custoPM || 0;
            const cooldown = f.base.cooldownSegundos || 0;
            
            return `**${f.base.nome}** (Nv.${f.nivel})\n` +
                   `‚îî üíô ${custoPM} PM | ‚è±Ô∏è ${cooldown}s | ID: \`${f.id}\``;
        }).join('\n\n');

        embed.addFields({
            name: `${tipoTexto}: ${nome}`,
            value: feiticosTexto,
            inline: false
        });
    });

    embed.setFooter({ text: "Use !usarfeitico <id> em combate para usar um feiti√ßo" });

    return message.reply({ embeds: [embed] });
}

async function mostrarInfoFeitico(message, idFeitico, ficha) {
    const feiticoBase = FEITICOS_BASE_ARCADIA[idFeitico];
    if (!feiticoBase) {
        return message.reply("‚ùå Feiti√ßo n√£o encontrado. Verifique o ID do feiti√ßo.");
    }

    const magiaAprendida = ficha.magiasConhecidas?.find(m => m.id === idFeitico);
    const nivelAtual = magiaAprendida?.nivel || 0;

    const embed = new EmbedBuilder()
        .setTitle(`‚ú® ${feiticoBase.nome}`)
        .setDescription(feiticoBase.descricao)
        .addFields(
            { name: "üè∑Ô∏è ID", value: feiticoBase.id, inline: true },
            { name: "üìã Tipo", value: feiticoBase.tipo, inline: true },
            { name: "üéØ Origem", value: `${feiticoBase.origemTipo}: ${feiticoBase.origemNome}`, inline: true },
            { name: "‚è±Ô∏è Cooldown Base", value: `${feiticoBase.cooldownSegundos || 0}s`, inline: true },
            { name: "üìä N√≠vel M√°ximo", value: feiticoBase.maxNivel.toString(), inline: true },
            { name: "üìö Status", value: magiaAprendida ? `‚úÖ Conhecido (Nv.${nivelAtual})` : "‚ùå N√£o aprendido", inline: true }
        )
        .setColor(magiaAprendida ? 0x00FF00 : 0xFF6B6B);

    // Mostrar requisitos
    if (feiticoBase.requisitosParaAprender.length > 0) {
        const requisitos = feiticoBase.requisitosParaAprender.map(req => {
            const feiticoReq = FEITICOS_BASE_ARCADIA[req.idFeitico];
            const temRequisito = ficha.magiasConhecidas?.find(m => m.id === req.idFeitico && m.nivel >= req.nivelMinimo);
            const status = temRequisito ? "‚úÖ" : "‚ùå";
            return `${status} ${feiticoReq?.nome || req.idFeitico} (Nv.${req.nivelMinimo})`;
        }).join('\n');

        embed.addFields({ name: "üìã Requisitos", value: requisitos, inline: false });
    }

    // Mostrar n√≠veis do feiti√ßo
    const niveisTexto = feiticoBase.niveis.map(nivel => {
        const status = nivelAtual >= nivel.nivel ? "‚úÖ" : "‚ùå";
        const custoPM = nivel.custoPM || 0;
        const pontos = nivel.pontosParaProximoNivel || 0;
        
        return `${status} **N√≠vel ${nivel.nivel}** (${custoPM} PM)\n` +
               `‚îî ${nivel.efeitoDesc}\n` +
               `‚îî Pontos necess√°rios: ${pontos}`;
    }).join('\n\n');

    embed.addFields({ name: "üìà N√≠veis do Feiti√ßo", value: niveisTexto, inline: false });

    // Mostrar feiti√ßos desbloqueados
    if (feiticoBase.desbloqueiaFeiticos.length > 0) {
        const desbloqueados = feiticoBase.desbloqueiaFeiticos.map(desb => {
            const feiticoDesb = FEITICOS_BASE_ARCADIA[desb.idFeitico];
            return `**${feiticoDesb?.nome || desb.idFeitico}** (ao atingir nv.${desb.aoAtingirNivel})`;
        }).join('\n');

        embed.addFields({ name: "üîì Desbloqueia", value: desbloqueados, inline: false });
    }

    return message.reply({ embeds: [embed] });
}

module.exports = { listarFeiticos };
